{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","reference/visibility-types.ts","components/visibility-filters.tsx","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","event","target","value","handleInputOnChange","onKeyPress","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputOnKeyPress","TodoItem","onClick","handleTodoComplete","todo","onBlur","handleTodoBlur","handleTodoUpdate","handleTodoRemove","computeVisible","visibilityFilter","TodoList","todos","map","VISIBILITY_TYPES","computeClassNames","myVisibilityFilter","propVisibilityFilter","console","log","classNames","VisibilityFilters","handleVisibilityFilter","TodoListApp","setTodos","setVisibilityFilter","JSON","stringify","newTodosState","push","find","filter","length","classList","add","remove","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.c131df2a.chunk.js","sourcesContent":["// Import dependencies\nimport * as React from 'react';\nimport shortid from 'shortid';\n\n// Import interfaces\nimport {TodoInterface, TodoFormInterface} from './../interfaces';\n\n// Todo form component\nconst TodoForm = (props: TodoFormInterface) => {\n  // Create ref for form input\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  // Create form state\n  const [formState, setFormState] = React.useState('')\n  // Handle todo input change\n  function handleInputOnChange(event: React.ChangeEvent<HTMLInputElement>) {\n    // Update form state with the text from input\n    setFormState(event.target.value)\n  }\n  // Handle 'Enter' in todo input\n  function handleInputOnKeyPress(event: React.KeyboardEvent) {\n    // Check for 'Enter' key\n    if (event.key === 'Enter') {\n      // Prepare new todo object\n      const newTodo: TodoInterface = {\n        id: shortid.generate(),\n        text: formState,\n        isCompleted: false\n      }\n      // Create new todo item\n      props.handleTodoCreate(newTodo)\n      // Reset the input field\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = '';\n      }\n    }\n  }\n  return (\n    <div className=\"todo-form\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder='Enter new todo'\n        onChange={event => handleInputOnChange(event)}\n        onKeyPress={event => handleInputOnKeyPress(event)}\n      />\n    </div>\n  )\n}\nexport default TodoForm;\n","// Import dependencies\nimport * as React from 'react'\n\n// Import interfaces\nimport { TodoItemInterface } from './../interfaces'\n\n// TodoItem component\nconst TodoItem = (props: TodoItemInterface) => {\n  return (\n    <div className='todo-item'>\n      <div onClick={() => props.handleTodoComplete(props.todo.id)}>\n        {props.todo.isCompleted ? (\n          <span className=\"todo-item-checked\">✔</span>\n        ) : (\n          <span className=\"todo-item-unchecked\" />\n        )}\n      </div>\n      <div className=\"todo-item-input-wrapper\">\n        <input\n          value={props.todo.text}\n          onBlur={props.handleTodoBlur}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.handleTodoUpdate(event, props.todo.id)}\n        />\n      </div>\n      <div className=\"item-remove\" onClick={() => props.handleTodoRemove(props.todo.id)}>\n        ⨯\n      </div>\n    </div>\n  )\n}\nexport default TodoItem\n","// Import dependencies\nimport * as React from 'react'\n\n// Import TodoItem\nimport TodoItem from './todo-item'\n\n// Import interfaces\nimport { TodoListInterface } from './../interfaces'\n\nfunction computeVisible (visibilityFilter: string, isCompleted: boolean ): string {\n    let className = 'show-todo-item';\n    if (visibilityFilter === 'open' && isCompleted === true ||\n        visibilityFilter === 'done' && isCompleted === false) {\n        className = 'hide-todo-item';\n    }\n    return className;\n}\n\n// TodoList component\nconst TodoList = (props: TodoListInterface) => {\n  return (\n    <div className=\"todo-list\">\n      <ul>\n        {props.todos.map((todo) => (\n          <li key={todo.id} className={computeVisible(props.visibilityFilter, todo.isCompleted)}>\n            <TodoItem\n              todo={todo}\n              handleTodoUpdate={props.handleTodoUpdate}\n              handleTodoRemove={props.handleTodoRemove}\n              handleTodoComplete={props.handleTodoComplete}\n              handleTodoBlur={props.handleTodoBlur}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\nexport default TodoList\n","export const VISIBILITY_TYPES = {\n    ALL: 'all',\n    OPEN: 'open',\n    DONE: 'done'\n}\n","// Import dependencies\nimport * as React from 'react';\n\nimport { VISIBILITY_TYPES } from '../reference/visibility-types';\n\n// Import interfaces\nimport { VisibilityFiltersInterface } from './../interfaces'\n\nfunction computeClassNames (myVisibilityFilter: string, propVisibilityFilter: string ): string {\n    console.log('test');\n    let classNames = 'filter';\n    if (myVisibilityFilter === propVisibilityFilter) {\n        classNames += ', filter-active';\n    }\n    return classNames;\n}\n\n// TodoList component\nconst VisibilityFilters = (props: VisibilityFiltersInterface) => {\n  return (\n    <div className=\"visibility-filter\">\n        <span className={computeClassNames(VISIBILITY_TYPES.ALL, props.visibilityFilter)} onClick={() => props.handleVisibilityFilter(VISIBILITY_TYPES.ALL)}>{VISIBILITY_TYPES.ALL}</span>\n        <span className={computeClassNames(VISIBILITY_TYPES.OPEN, props.visibilityFilter)} onClick={() => props.handleVisibilityFilter(VISIBILITY_TYPES.OPEN)}>{VISIBILITY_TYPES.OPEN}</span>\n        <span className={computeClassNames(VISIBILITY_TYPES.DONE, props.visibilityFilter)} onClick={() => props.handleVisibilityFilter(VISIBILITY_TYPES.DONE)}>{VISIBILITY_TYPES.DONE}</span>\n    </div>\n  )\n}\nexport default VisibilityFilters\n","// Import dependencies\nimport * as React from 'react'\nimport { render } from 'react-dom'\n\n// Import components\nimport TodoForm from './components/todo-form';\nimport TodoList from './components/todo-list';\nimport VisibilityFilters from './components/visibility-filters';\n\n// Import interfaces\nimport { TodoInterface } from './interfaces'\n\n// Import styles\nimport './styles/styles.css'\n\n// TodoListApp component\nconst TodoListApp = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([])\n  // const [todosFiltered, setTodosFiltered] = React.useState<TodoInterface[]>([])\n  const [visibilityFilter, setVisibilityFilter] = React.useState<string>('all')\n\n  // Creating new todo item\n  function handleTodoCreate(todo: TodoInterface) {\n    console.log('TodoApp.handleTodoCreate.todo = ' + JSON.stringify(todo));\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos]\n\n    // Update new todos state\n    newTodosState.push(todo)\n\n    // Update todos state\n    setTodos(newTodosState)\n    // handleVisibilityFilter(visibilityFilter);\n    // updateTodosState(newTodosState, visibilityFilter);\n}\n\n  // Update existing todo item\n  function handleTodoUpdate(event: React.ChangeEvent<HTMLInputElement>, id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos]\n\n    // Find correct todo item to update\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text = event.target.value\n\n    // Update todos state\n    setTodos(newTodosState)\n    // updateTodosState(newTodosState, visibilityFilter);\n  }\n\n  // Remove existing todo item\n  function handleTodoRemove(id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = todos.filter((todo: TodoInterface) => todo.id !== id)\n\n    // Update todos state\n    setTodos(newTodosState)\n    // updateTodosState(newTodosState, visibilityFilter);\n  }\n\n  // Check existing todo item as completed\n  function handleTodoComplete(id: string) {\n    // Copy current todos state\n    const newTodosState: TodoInterface[] = [...todos]\n\n    // Find the correct todo item and update its 'isCompleted' key\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted = !newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted\n\n    // Update todos state\n    setTodos(newTodosState)\n    // updateTodosState(newTodosState, visibilityFilter);\n  }\n\n  // function updateTodosState(ntdState: TodoInterface[], vFilter: string) {\n  //   console.log('TodoApp.updateTodosState.ntdstate = ' + JSON.stringify(ntdState));\n  //   console.log('TodoApp.updateTodosState.vFilter = ' + vFilter);\n  //   console.log('TodoApp.updateTodosState.todos (before update) = ' + JSON.stringify(todos));\n  //   setTodos(ntdState);\n  //   console.log('TodoApp.updateTodosState.todos (after update) = ' + JSON.stringify(todos));\n  //   handleVisibilityFilter(vFilter);\n  // }\n\n  // Check if todo item has title\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add('todo-input-error')\n    } else {\n      event.target.classList.remove('todo-input-error')\n    }\n  }\n\n  function  handleVisibilityFilter (filter: string) {\n    console.log('TodoApp.handleVisibilityFilter.Filter = ' + filter);\n    setVisibilityFilter(filter);\n    // let newTodosFiltered: TodoInterface[];\n    // console.log('TodoApp.handleVisibilityFilter.todos = ' + JSON.stringify(todos));\n    // switch (filter) {\n    //     case 'all':\n    //         newTodosFiltered = [...todos];\n    //         break;\n    //     case 'open':\n    //         newTodosFiltered = todos.filter((todo: TodoInterface) => todo.isCompleted === false);\n    //         break;\n    //     case 'done':\n    //         newTodosFiltered = todos.filter((todo: TodoInterface) => todo.isCompleted === true);\n    //         break;\n    //     default:\n    //         newTodosFiltered = [...todos];\n    //         break;\n    //   }\n    //   setTodosFiltered(newTodosFiltered);\n    //   console.log('TodoApp.handleVisibilityFilter.newTodosUIState = ' + JSON.stringify(newTodosFiltered));\n    //   console.log('TodoApp.handleVisibilityFilter.todosUI = ' + JSON.stringify(todosFiltered));\n  }\n\n  return (\n    <div className=\"todo-list-app\">\n      <h1 className=\"todo-header\">todo</h1>\n      <TodoForm\n        todos={todos}\n        handleTodoCreate={handleTodoCreate}\n      />\n\n      <TodoList\n        todos={todos}\n        visibilityFilter={visibilityFilter}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoBlur={handleTodoBlur}\n      />\n\n      <VisibilityFilters\n        visibilityFilter={visibilityFilter}\n        handleVisibilityFilter={handleVisibilityFilter}\n      />\n\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<TodoListApp />, rootElement)\n"],"sourceRoot":""}